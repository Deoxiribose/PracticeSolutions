//Jacob Bradley 
//6/29/24
//This is an optimized version of a palindrome finder
//The word gets traversed by a for loop, the center of the palindrome is figured by len1 and len2
//that references the private function, expandAroundCenter. After length and position calculation 
//the program returns a substring using the starting index and max length of the currated string!


class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        if (n == 0) return "";

        int start = 0, maxLen = 1;
        
        for (int i = 0; i < n; ++i) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            
            int currLen = max(len1, len2);
            if (currLen > maxLen) {
                maxLen = currLen;
                start = i - (currLen - 1) / 2;
            }
        }
        
        return s.substr(start, maxLen);
    }
    
private:
    int expandAroundCenter(const string& s, int left, int right) {
        while (left >= 0 && right < s.size() && s[left] == s[right]) {
            left--;
            right++;
        }
        return right - left - 1;
    }
};


